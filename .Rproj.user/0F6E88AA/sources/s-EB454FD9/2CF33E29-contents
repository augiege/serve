server <- function(session, input, output){
  # Logging
  track_usage(storage_mode = store_sqlite(path = "logs/"))
  
  # Sets the items in the demography select box based off either MMRatio or MMRate
  demography_select_box <- reactive({
    switch(input$mm_select_box,
           "mmrate_per_1kyl" = ui_globals$mm_demo_choices_mmrate,
           "mmratio_per_100klb" = ui_globals$mm_demo_choices_mmratio)
  })
  
  # Demography select box 
  output$demography_select_box = renderUI({
    radioButtons('demography_select_box',
                  label = h5(ui_globals$mm_demo_label),
                  choices = demography_select_box(),
                  selected = ui_globals$mm_demo_default)
  })
  
  # Sets the items in the age select box based off either MMRatio or MMRate
  age_select_box <- reactive({
    switch(input$mm_select_box,
           "mmrate_per_1kyl" = mmRateUniqueAgeGroups,
           "mmratio_per_100klb" = mmRatioUniqueAgeGroups) %>% 
      prepend(list('All Ages' = 'all_ages'))
  })
  
  # If age is selected in the demography select box, renders the age select box
  output$age_select_box = renderUI({
    selectInput('age_select_box',
                label = h5('Age of Mother'),
                choices = age_select_box(),
                selected = 'all_ages')
  })
  
  # Sets the items in the ethnicity select box with all unique options and adds 'All Ethnicities'
  ethnicity_select_box <- reactive({
    mmRatio_ethnicity_unique_groups %>%
      prepend(list('All Ethnicities' = 'all_ethnicities'))
  })
  
  # If ethnicity is selected in the demography select box, renders the ethnicity select box
  output$ethnicity_select_box = renderUI({
    selectInput('ethnicity_select_box',
                label = h5('Race/Ethnicity'),
                choices = ethnicity_select_box(),
                selected = 'all_ethnicities')
  })
  
  # Map title showing MMRatio or MMRate by Year, All Women, an Age Group or Ethnicity
  map_title <- reactive({
    my_sel <- input$mm_select_box
    my_year <- input$mm_slide_year
    
    req(input$demography_select_box)
    my_dem <- input$demography_select_box
    
    rate_or_ratio <- if(my_sel == "mmratio_per_100klb") "Ratio" else "Rate"

    title <- paste(my_year, "Maternal Mortality", rate_or_ratio, paste0("by County", "</br>"))

    if (my_dem == "age") {
      age_sel <- input$age_select_box
      age_ending <- if(age_sel == "all_ages") "of All Ages" else paste("Ages", age_sel)
      title <- paste(title, "for Women", age_ending, collapse=" ")
    }
    if (my_dem == "ethnicity") {
      ethnicity_sel <- input$ethnicity_select_box
      ethnicity_ending <- if(ethnicity_sel == "all_ethnicities") "All Ethnicities" else paste(ethnicity_sel, "</br>", "Ethnicity")
      title <- paste(title, "for Women of", ethnicity_ending, collapse=" ")
    }
    title %>% 
      HTML()
  })
  
  # Other layer map title
  # Reference - https://github.com/rstudio/leaflet/issues/215
  layer_map_title <- reactive({
    year <- input$mm_slide_year
    if (year >= 2010) {
      group <- input$other_layer_box
      
      # Change group for Cesarean Rate
      group <- if (group == "Difference in NTSV Rate") "Difference in NTSV Cesarean Rate</br>from 2020 NJ Statewide Goal" else group
      
      # Change year to reflect the data being shown
      if (group == "OB/GYN Physicians Per Capita") {
        year <- obgyn_year(input$mm_slide_year)
      }
      
      title <- group %>%
        paste(year, ., "by County") 
        
      # Add age groups on the end if it's an insurance layer
      if (group == "Percent Covered by Medicaid" || group == "Percent Uninsured") {
        title <- title %>% 
          paste0("</br>", "for Females Ages 6-54")
      }
    } else {
      title <- "Other Layer data is only available</br>from 2010 forwards."
    }

    if (input$mm_slide_year != year) {
      title <- title %>%
        paste("<br/>", icon("exclamation-circle"), 
              "<i>Years differ due to data availability.</i>")
    }
    
    title %>% 
      HTML()
  })
  
  # Text upon hovering on counties based on either MMRatio or MMRate
  labels_change <- reactive({
    my_sel <- input$mm_select_box
    my_year <- input$mm_slide_year
    
    # Denominator string based on selector
    denom_string <- ifelse(my_sel == "mmratio_per_100klb",
                           "MMRatio",
                           "MMRate")
    
    # either mmrate or mmratio based on selection
    rate_or_ratio <- rel_mmr_df() %>% filter(year == my_year)
    mmr_merge <- counties@data %>% 
      merge(rate_or_ratio, by = "County_Name", sort = FALSE)

    denom_desc <- ifelse(my_sel == "mmratio_per_100klb",
                         "live births",
                         "years lived")
    
    # Actual label html
    sprintf(
      paste("<strong>%s</strong><br/>",
            "%s maternal deaths<br/>",
            "%s", denom_desc, "<br/>", 
            "%s", denom_string),
      mmr_merge$COUNTY, 
      mmr_merge$maternal_deaths %>% 
        prettyNum(big.mark = ","),
      mmr_merge %>%
        pull(gsub(" ", "_", denom_desc)) %>%
        prettyNum(big.mark = ","), 
      mmr_merge %>% 
        pull(my_sel) %>% 
        prettyNum(big.mark = ",", scientific = FALSE)
      ) %>%
      lapply(HTML)
  })
  
  # Legend range to remain constant through different years
  legend_range <- reactive({
    my_sel <- input$mm_select_box
    mmr_df <- rel_mmr_df()
    req(nrow(mmr_df) > 0)

    max_chosen <- mmr_df %>%
      pull(my_sel) %>%
      max(na.rm = TRUE)
    c(0, max_chosen)
  })

  # Determine theoreticl max for MMRatio or MMRate
  theoretical_max <- reactive({
    switch(input$mm_select_box,
           "mmratio_per_100klb" = 100000,
           "mmrate_per_1kyl" = 1000)
  })

  # If mmr values are below theoretical max extract values to create
  # more accurate breaks in map
  # Else use all values in df
  valid_mmr_values <- reactive({
    mmr_df <- rel_mmr_df()
    req(nrow(mmr_df) > 0)

    my_sel <- input$mm_select_box
    current_mmr <- mmr_df %>% pull(my_sel)
    max_mmr <- max(current_mmr)

    # Check if current max value in df exceeds theoretical max
    if (max_mmr >= theoretical_max()) {
      all_values <- current_mmr[current_mmr < theoretical_max()]
      #create custom bucket to capture extreme values
      extreme_brks <- list(theoretical_max(), max_mmr)
      return(list("values" = all_values, "custom_brk" = extreme_brks))
    } else {
      return(list("values" = current_mmr))
    }
  })

  # Generate custom color palette using "fisher" style to create breaks for
  # scale type: multiple scales with extreme values distinguished
  # Number of breaks chosen was 7 because 9 is the max number allowed for Red color,
  # when a custom break is added this will maximize the number of colors allowed
  custom_pal <- reactive({
    intervals <- classIntervals(valid_mmr_values()$values,
                                n = 7, style = "fisher", warnSmallN = FALSE)

    breaks <- intervals$brks
    # If custom break is not empty add to pregenerated list of breaks
    if (!is.null(valid_mmr_values()$custom_brk)) {
      breaks <- append(breaks, as.numeric(valid_mmr_values()$custom_brk))
    }
    colorBin(
      palette = ifelse(input$mm_select_box == "mmratio_per_100klb", colors_mmratio, colors_mmrate),
      bins = unique(breaks))
  })

  # Color scheme for other layer map
  color_scheme_layer_map <- reactive({
    switch(input$other_layer_box,
           "Percent Uninsured" = colors_uninsured,
           "Percent Covered by Medicaid" = colors_medicaid,
           "Difference in NTSV Rate" = colors_csection,
           "OB/GYN Physicians Per Capita" = colors_obgyn,
           "Practitioner Midwives Per Capita" = colors_midwives,
           "Percent Poverty" = colors_poverty)
  })
  
  # Max for other layer map
  max_layer_map <- reactive({
    switch(input$other_layer_box,
           "Percent Uninsured" = max_pct_uninsured_any,
           "Percent Covered by Medicaid" = max_pct_insured_medicaid,
           "Difference in NTSV Rate" = max_csection,
           "OB/GYN Physicians Per Capita" = max_obgyn,
           "Practitioner Midwives Per Capita" = max_midwives,
           "Percent Poverty" = max_poverty)
  })
  
  # Variable for other layer map
  var_layer_map <- reactive({
    switch(input$other_layer_box,
           "Percent Uninsured" = "pct_uninsured",
           "Percent Covered by Medicaid" = "pct_medicaid",
           "Difference in NTSV Rate" = "ntsv_goal_diff",
           "OB/GYN Physicians Per Capita" = "per_capita_obgyns",
           "Practitioner Midwives Per Capita" = "per_capita_midwives",
           "Percent Poverty" = "percent_poverty")
  })
  
  # Palette parameters for other layer map
  pal_layer_map <- reactive({
    # This layer will have negative values and use a reversed palette 
    # Setting min_scale to negative of max_csection in order to have
    # the middle color (white) in color scale line up with 0
    if (input$other_layer_box == "Difference in NTSV Rate") {
      min_val <- min_csection
      min_scale <- -(max_csection)
      pal_reverse <- TRUE
    } else {
      min_val <- 0
      min_scale <- 0
      pal_reverse <- FALSE
    }
    
    list("min_val" = min_val,
         "min_scale" = min_scale,
         "pal_reverse" = pal_reverse)
  })
  
  # MMR DataFrame Selection
  rel_mmr_df <- reactive({
    if (input$demography_select_box == "age" & req(input$age_select_box) != "all_ages") {
      switch(input$mm_select_box,
             "mmratio_per_100klb" = mmRatioAge,
             "mmrate_per_1kyl" = mmRateAge) %>%
        filter(age_of_mother == input$age_select_box)
    } else if (input$mm_select_box == "mmratio_per_100klb" & input$demography_select_box == "ethnicity" & req(input$ethnicity_select_box) != "all_ethnicities") {
      mmRatio_ethnicity %>% 
        filter(ethnicity_race == input$ethnicity_select_box)
    } else {
      switch(input$mm_select_box,
             "mmratio_per_100klb" = mmRatio,
             "mmrate_per_1kyl" = mmRate)
    }    
  })
  
  # Color change parameter to ~pal() makes county colors dynamic
  mm_select_change <- reactive({
    my_sel <- input$mm_select_box
    my_year <- input$mm_slide_year
    
    rate_or_ratio <- rel_mmr_df() %>% filter(year == my_year)
    mmr_merge <- merge(counties@data, rate_or_ratio, by = "County_Name", sort = FALSE)
    
    mmr_merge %>% pull(my_sel)
  })

  # Other Layer Data Reactive
  other_layer_data <- reactive({
    req(input$mm_slide_year >= 2010)

    # Filter to chosen year
    rel_data <- other_layer_df %>%
      filter(year == input$mm_slide_year) %>%
      select(-per_capita_obgyns)
    
    # For obgyns - show most recent data, without looking ahead
    rel_obgyns <- other_layer_df %>% 
      filter(year == obgyn_year(input$mm_slide_year)) %>%
      select(FIPS_Code, per_capita_obgyns)

    # Add back obgyn data and arrange in the county display order
    rel_data %>%
      full_join(rel_obgyns, by = c("FIPS_Code")) %>%
      arrange(nj_county_order)
  })
  
  output$new_jersey_map <- renderLeaflet({
    basic_map_NJ() %>%
      hospital_layer() 
  })
  
  output$layer_map <- renderLeaflet({
    basic_map_NJ() %>%
      hospital_layer()
  })
  
  # Observe county colors and labels change
  observe({
    pal <- custom_pal()
    
    leafletProxy("new_jersey_map") %>%
      clearShapes() %>%
      addPolygons(data = counties,
                  color = 'black',
                  fillColor = ~pal(mm_select_change()),
                  fillOpacity = .7,
                  weight = 2,
                  group = "counties", # Group by "counties" in order to call layer toggle
                  highlight = map_highlight(), # Option to highlight upon hover
                  label = labels_change(),
                  labelOptions = map_label(),
                  options = pathOptions(pane = "polygons"))
  })
  
  # Observe legend change
  observe({
    pal <- custom_pal()
    leafletProxy("new_jersey_map") %>% clearControls() %>%
      addLegend(pal = pal, values = legend_range(), title = "MMR", opacity = 1)
  })
  
  # Observe contextual layer change
  observeEvent(list(input$other_layer_box, input$mm_slide_year), {
    layer_var <- other_layer_data() %>%
      pull(var_layer_map())
    
    pal_params <- pal_layer_map()
    color_scheme <- color_scheme_layer_map()
    max_val <- max_layer_map()
    
    title <- case_when(
      any(grepl("Percent|NTSV", input$other_layer_box)) ~ "%",
      !(grepl("Percent", input$other_layer_box)) ~ "#"
    )
    
    leafletProxy("layer_map") %>%
      clearShapes() %>% 
      clearControls() %>%
      add_polygons_layer_map(., 
                             color_scheme, 
                             input$other_layer_box,
                             max_val, 
                             layer_var) %>%
      addLegend(pal = colorNumeric(color_scheme, 
                                   domain = c(pal_params$min_scale, max_val), 
                                   reverse = pal_params$pal_reverse),
                values = c(pal_params$min_val, max_val),
                title = title,
                opacity = 1)
  })
  
  # Reset selected value of mm_select_box to default value and year to 2017
  observeEvent(input$reset_input, {
    updateSelectInput(session, "mm_select_box", selected = "mmratio_per_100klb")
    updateSliderInput(session, 'mm_slide_year', value = 2017)
    updateSelectInput(session, "demography_select_box", selected = "all")
    
    leafletProxy("new_jersey_map") %>% setView(lng = -74.406, lat = 40.058, zoom = 7.8)
    leafletProxy("layer_map") %>% setView(lng = -74.406, lat = 40.058, zoom = 7.8)
  })
  
  # Reset selected value of mm_select_box2 to default value and year to 2017
  observeEvent(input$reset_input2, {
    updateSelectInput(session, "mm_select_box2", selected = "mmratio_per_100klb")
    updateSelectInput(session, 'mm_county_box', selected = mmUniqueCounties[1])
    updateSliderInput(session, 'mm_slide_year2', value = 2017)
    updateRadioButtons(session, "demography_radio", selected = "age")
  })
  
  # Observe rate/ratio switch to reset Demography Select Box to All Women
  observeEvent(input$mm_select_box, {
    req(input$demography_select_box)
    updateSelectInput(session, "demography_select_box", selected = "all")
  })

  output$mm_formula <- renderUI({
    switch(input$mm_select_box,
           "mmrate_per_1kyl" = mmrate_latex,
           "mmratio_per_100klb" = mmratio_latex) %>%
      helpText() %>%
      withMathJax()
  })
  
  output$mm_formula2 <- renderUI({
    switch(input$mm_select_box2,
           "mmrate_per_1kyl" = mmrate_latex,
           "mmratio_per_100klb" = mmratio_latex) %>%
      helpText() %>%
      withMathJax()
  })
  
  output$map_title <- renderUI({
    map_title()
  })
  
  output$layer_map_title <- renderUI({
    layer_map_title()
  })
  
  ### Explore Demography Tab
  
  # Sets the items in the demography radio options based off either MMRatio or MMRate
  demography_radio <- reactive({
    switch(input$mm_select_box2,
           "mmrate_per_1kyl" = ui_globals$mm_demo_radio_choices_mmrate,
           "mmratio_per_100klb" = ui_globals$mm_demo_radio_choices_mmratio)
  })
  
  # Demography radio
  output$demography_radio = renderUI({
    radioButtons('demography_radio',
                 label = h5(ui_globals$mm_demo_label),
                 choices = demography_radio(),
                 selected = ui_globals$mm_demo_radio_default)
  })
  
  # MMR DataFrame Selection for non-geo tab
  rel_mmr_df2 <- reactive({
    my_sel2 <- input$mm_select_box2
    my_year2 <- input$mm_slide_year2
    my_county <- input$mm_county_box
    req(input$demography_radio)
    
    df <- if (input$demography_radio == "age") {
      if (my_county != "All Counties of NJ") {
        switch(input$mm_select_box2,
               "mmratio_per_100klb" = mmRatioAge,
               "mmrate_per_1kyl" = mmRateAge) %>%
          filter(year == my_year2, county == my_county)
      } else {
        switch(input$mm_select_box2,
               "mmratio_per_100klb" = mmRatioAgeNJ,
               "mmrate_per_1kyl" = mmRateAgeNJ) %>%
          filter(year == my_year2)
      }
    } else if (input$demography_radio == "ethnicity" & req(my_sel2 == "mmratio_per_100klb")) {
      if (my_county != "All Counties of NJ"){
        mmRatio_ethnicity %>%
          filter(year == my_year2, county == my_county)
      } else {
        mmRatio_ethnicityNJ %>% filter(year == my_year2)
      }
    }
    
    # If the sum of our rate/ratio is zero, return 0 for empty graph
    if (df %>% pull(my_sel2) %>% sum() == 0) 0 else df
    
  })

  # Plotly graph
  output$new_jersey_graph <- renderPlotly({
    validate( 
      need(length(rel_mmr_df2()) > 1, "") # Validate that our rate or ratio is not all zeros
    )
    rel_mmr_df2() %>%
      one_plot()
  })
  
  # Map title showing MMRatio or MMRate by Year, All Women, an Age Group or Ethnicity
  graph_title <- reactive({
    my_sel2 <- input$mm_select_box2
    my_year2 <- input$mm_slide_year2
    my_dem2 <- input$demography_radio
    my_county <- input$mm_county_box
    rate_or_ratio <- if(my_sel2 == "mmratio_per_100klb") "Ratio" else "Rate"

    if (length(rel_mmr_df2()) <= 1) {
      title <- paste("Maternal Mortality", paste0(rate_or_ratio, "s"), "in", my_county, "County were all 0 for", my_year2)
    } else {
      title <- paste(my_year2, "Maternal Mortality", paste0(rate_or_ratio, "s"), "for", my_county)
      if (my_county != "All Counties of NJ") {
        title <- paste(title, "County")
      }
    }
    
    title %>% 
      HTML()
  })
  
  output$graph_title <- renderUI({
    graph_title()
  })
  
  # Info Box 
  sel_data <- reactive({
    data <- rel_mmr_df() %>% filter(year == input$mm_slide_year)
  })
  
  sel_data_numerator <- reactive({
    data <- sel_data()
    numerator <- sum(data$maternal_deaths)
  })
  
  sel_data_denominator <- reactive({
    data <- sel_data()
    
    denominator <- if (input$mm_select_box == "mmrate_per_1kyl") sum(data$years_lived) else sum(data$live_births)
  })
  
  overall_measurement <- reactive({
    multiplier <- if (input$mm_select_box == "mmrate_per_1kyl") 1000 else 100000
    
    mmrate_or_ratio <- round(sel_data_numerator()/sel_data_denominator() * multiplier, 3) %>% as.character()
  })
  
  output$info_box <- renderUI({
    overall_measurement()
  })
  
  output$info_box_title <- renderUI({
    title <- paste("Overall NJ", map_title()) %>% str_replace_all("</br>", "") %>% str_replace(" by County", "") %>% 
      HTML()
  })
  
  output$info_box_subtitle <- renderUI({
    ending <- if (input$mm_select_box == "mmrate_per_1kyl") "Years Lived" else "Live Births"
    
    subtitle <- paste(format(sel_data_numerator(), big.mark=","), "Maternal Deaths", "</br>",
                      format(sel_data_denominator(), big.mark=","), ending) %>% 
      HTML()
  })
  
  output$census_tbl_url <- renderUI({
    if (input$mm_county_box != "All Counties of NJ") {
      this_fips <- counties@data %>%
        filter(County_Name == input$mm_county_box) %>%
        pull(FIPSSTCO)
      
      this_url <- build_census_tbl_url(input$mm_slide_year2, this_fips, geo_level = "county")
    } else {
      this_url <- build_census_tbl_url(input$mm_slide_year2, "34", geo_level = "state")
    }
      
    this_url %>%
      a("For reference, a detailed Race/Ethnicity breakdown is available here from the Census Bureau.", 
        href = .)
  })
  
  ## Bookmark Server Functions
  # Need to exclude the buttons from themselves being bookmarked
  # and other inputs that aren't key for state
  
  # URL Shortening
  onBookmarked(function(url) {
    # Adapted from https://rdrr.io/cran/carbonate/src/R/uri_functions.R
    new_url <- paste0("http://tinyurl.com/api-create.php?url=", url) %>%
      httr::GET() %>%
      httr::content()

    showBookmarkUrlModal(new_url)
  })
  
  
  setBookmarkExclude(c("bookmark1", "bookmark2", 
                       "sidebarItemExpanded", ".shinylogs_lastInput",
                       "reset_input"))
  
  # Trigger bookmarking with either button
  observeEvent(input$bookmark1, {
    session$doBookmark()
  })
  observeEvent(input$bookmark2, {
    session$doBookmark()
  })
}